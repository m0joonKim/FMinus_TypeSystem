%{

(* Convert [e_n; ... ; e_2; e_1] into App (... (App (e_1, e_2), ... e_n) *)
let rec genApp lst =
  match lst with
  | [] -> failwith "Unreachable"
  | [e] -> e
  | head :: tail -> AST.App (genApp tail, head)

let expsToExpr lst = genApp (List.rev lst)

let checkName func arg =
  if func = arg then failwith "Function and argument name are same"

%}

%token TRUE FALSE PLUS MINUS EQUAL NOTEQ LESS GREATER
%token <int> NUM
%token <string> ID
%token LPAR RPAR ARROW ASSIGN SEMICOLON IF THEN ELSE LET IN FUN REC
%token EOF

%nonassoc IN ELSE ARROW
%left EQUAL NOTEQ LESS GREATER
%left PLUS MINUS

%start prog
%type <AST.Exp> prog

%%

expr: exps { expsToExpr $1 }
    | MINUS expr { AST.Neg $2 }
    | expr PLUS expr { AST.Add ($1, $3) }
    | expr MINUS expr { AST.Sub ($1, $3) }
    | expr LESS expr { AST.LessThan ($1, $3) }
    | expr GREATER expr { AST.GreaterThan ($1, $3) }
    | expr EQUAL expr { AST.Equal ($1, $3) }
    | expr NOTEQ expr { AST.NotEq ($1, $3) }
    | IF expr THEN expr ELSE expr { AST.IfThenElse ($2, $4, $6) }
    | LET ID EQUAL expr IN expr { AST.LetIn ($2, $4, $6) }
    | LET ID ID EQUAL expr IN expr {
        checkName $2 $3
        AST.LetFunIn ($2, $3, $5, $7)
      }
    | LET REC ID ID EQUAL expr IN expr {
        checkName $3 $4
        AST.LetRecIn ($3, $4, $6, $8)
      }
    | FUN ID ARROW expr { AST.Fun ($2, $4) }

exp:  NUM { AST.Num $1 }
    | TRUE { AST.True }
    | FALSE { AST.False }
    | ID { AST.Var $1 }
    | LPAR expr RPAR { $2 }

exps: exp { [$1] }
    | exp exps { $1 :: $2 }

prog: expr EOF { $1 }
